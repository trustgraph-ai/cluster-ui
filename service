#!/usr/bin/env python3

import _jsonnet as j
from aiohttp import web
import aiohttp
import asyncio
import logging
import os
import json
import yaml

logger = logging.getLogger("service")
logger.setLevel(logging.INFO)

class Api:
    def __init__(self, config=None):

        if config:
            self.config = config
        else:
            self.config = {}

        self.port = int(self.config.get("port", "8081"))
        self.app = web.Application(middlewares=[])

#        self.app.add_routes([web.post("/api/generate", self.generate)])
        self.app.router.add_route('GET', '/ws', self.websocket_handler)
        self.app.add_routes([web.get("/{tail:.*}", self.everything)])

    async def websocket_handler(self, request):

        print('Websocket connection starting')
        ws = aiohttp.web.WebSocketResponse()
        await ws.prepare(request)
        print('Websocket connection ready')

        async for msg in ws:
            print(msg)

            if msg.type == aiohttp.WSMsgType.TEXT:

                try:
                    obj = json.loads(msg.data)
                except:
                    await ws.send_json({
                        "type": "error",
                        "message": f"JSON parse fail",
                    })
                    continue

                if obj["type"] == "close":
                    await ws.close()
                    break

                if obj["type"] == "message":
                    await asyncio.sleep(2)
                    await ws.send_json({
                        "type": "response",
                        "text": obj["message"] + " answer",
                    })
                    continue

                await ws.send_json({
                    "type": "error",
                    "message": f"Don't understand type {obj['type']}",
                })


        print('Websocket connection closed')
        return ws

    async def everything(self, request):

        print(request)
        if ".." in request.path:
            return web.HTTPNotFound()

        if request.path == "/":
            with open("dist/index.html", "r") as f:
                return web.Response(
                    text=f.read(), content_type="text/html"
                )

        print(request.path)

        if request.path == "/api/patterns":
            return web.Response(
                text=self.patterns, content_type="application/json"
            )

        if request.path.endswith(".css"):
            with open("dist" + request.path, "r") as f:
                data = f.read()
            return web.Response(
                text=data, content_type="text/css"
            )

        if request.path.endswith(".js"):
            with open("dist" + request.path, "r") as f:
                data = f.read()
            return web.Response(
                text=data, content_type="text/javascript"
            )

        if request.path.endswith(".html"):
            with open("dist" + request.path, "r") as f:
                data = f.read()
            return web.Response(
                text=data, content_type="text/html"
            )

        return web.HTTPNotFound()

    async def generate(self, request):

        print("Generate...")
        config = await request.text()

        print(config)

        config = config.encode("utf-8")

        gen = Generator(config)

        with open("./templates/config-loader.jsonnet", "r") as f:
            wrapper = f.read()
        processed = gen.process(wrapper)

        return web.Response(
            text=yaml.dump(processed), content_type = "text/plain"
        )

    def run(self):

        web.run_app(self.app, port=self.port)

a = Api()
a.run()

