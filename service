#!/usr/bin/env python3

import _jsonnet as j
from aiohttp import web
import logging
import os
import json

logger = logging.getLogger("service")
logger.setLevel(logging.INFO)

class Generator:

    def __init__(self, base="../pulsar3/templates/"):
        self.jsonnet_base = base

    def process(self, config):

        res = j.evaluate_snippet("config", config, import_callback=self.load)
        return json.loads(res)

    def load(self, dir, filename):

        logger.debug("Request jsonnet: %s %s", dir, filename)

        try:
            if dir:
                path = os.path.join(".", dir, filename)
            else:
                path = os.path.join(self.jsonnet_base, filename)

            logger.debug("Try: %s", path)
            with open(path, "rb") as f:
                logger.debug("Loaded: %s", path)
                return str(path), f.read()

        except:
            path = os.path.join(self.jsonnet_base, filename)
            logger.debug("Try: %s", path)
            with open(path, "rb") as f:
                logger.debug("Loaded: %s", path)
                return str(path), f.read()

class Api:
    def __init__(self, config=None):

        if config:
            self.config = config
        else:
            self.config = {}

        self.port = int(self.config.get("port", "8080"))
        self.gen = Generator()
        self.app = web.Application(middlewares=[])

        self.app.add_routes([web.post("/api/generate", self.generate)])
        self.app.add_routes([web.get("/{tail:.*}", self.everything)])

    async def everything(self, request):

        if ".." in request.path:
            return web.HTTPNotFound()

        if request.path == "/":
            with open("dist/index.html", "r") as f:
                return web.Response(
                    text=f.read(), content_type="text/html"
                )

        print(request.path)

        if request.path.endswith(".css"):
            with open("dist" + request.path, "r") as f:
                data = f.read()
            return web.Response(
                text=data, content_type="text/css"
            )

        if request.path.endswith(".js"):
            with open("dist" + request.path, "r") as f:
                data = f.read()
            return web.Response(
                text=data, content_type="text/javascript"
            )

        if request.path.endswith(".html"):
            with open("dist" + request.path, "r") as f:
                data = f.read()
            return web.Response(
                text=data, content_type="text/html"
            )

        return web.HTTPNotFound()

    async def generate(self, request):

        print("Generate...")
        config = await request.text()

        next = self.gen.process(config)

        print(next)

        return web.Response(
            text=json.dumps(next), content_type = "text/plain"
        )

    def run(self):

        web.run_app(self.app, port=self.port)

a = Api()

a.run()

